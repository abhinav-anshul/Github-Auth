import { RequestError } from "@octokit/request-error";
export async function getOAuthAccessToken(state, options) {
    var _a, _b, _c, _d;
    /* istanbul ignore next: coverage probles with optional chaning */
    const authOptionsPassed = typeof ((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.auth) === null || _b === void 0 ? void 0 : _b.code) !== "undefined";
    const authOptions = authOptionsPassed
        ? /* istanbul ignore next: coverage probles with optional chaning */
            (_c = options) === null || _c === void 0 ? void 0 : _c.auth
        : state;
    if (state.token && !authOptionsPassed) {
        return state.token;
    }
    // The "/login/oauth/access_token" is not part of the REST API hosted on api.github.com,
    // instead itâ€™s using the github.com domain.
    const route = /^https:\/\/(api\.)?github\.com$/.test(state.request.endpoint.DEFAULTS.baseUrl)
        ? "POST https://github.com/login/oauth/access_token"
        : `POST ${state.request.endpoint.DEFAULTS.baseUrl.replace("/api/v3", "/login/oauth/access_token")}`;
    /* istanbul ignore next: coverage probles with optional chaning */
    const request = ((_d = options) === null || _d === void 0 ? void 0 : _d.request) || state.request;
    const parameters = {
        headers: {
            accept: "application/json"
        },
        client_id: state.clientId,
        client_secret: state.clientSecret,
        code: authOptions.code,
        redirect_uri: authOptions.redirectUrl,
        state: authOptions.state
    };
    const response = await request(route, parameters);
    if (response.data.error !== undefined) {
        throw new RequestError(`${response.data.error_description} (${response.data.error})`, response.status, {
            headers: response.headers,
            request: request.endpoint(route, parameters)
        });
    }
    const { data } = response;
    const newToken = {
        token: data.access_token,
        scopes: data.scope.split(/,\s*/).filter(Boolean)
    };
    if (!authOptionsPassed) {
        state.token = newToken;
    }
    return newToken;
}
